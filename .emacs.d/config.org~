#+TITLE: Bilal's GNU Emacs Config
#+AUTHOR: Bilal Kamran
#+DESCRIPTION: My Personal GNU Emacs Config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* IMPORTANT THINGS TO LOAD

** Elpaca Package Manager

#+BEGIN_SRC emacs-lisp

(defvar elpaca-installer-version 0.8)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
  
#+END_SRC

** Load Evil Mode

#+BEGIN_SRC emacs-lisp

;; Install a package via the elpaca macro
;; See the "recipes" section of the manual for more details.

;; (elpaca example-package)

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode))

;;When installing a package used in the init file itself,
;;e.g. a package which adds a use-package key word,
;;use the :wait recipe keyword to block until that package is installed/configured.
;;For example:
;;(use-package general :ensure (:wait t) :demand t)

;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil 
:ensure t 
:demand t
:init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
    (evil-mode))

(use-package evil-collection
  :after evil
  :config
  ;; Do not uncomment this unless you want to specify each and every mode
  ;; that evil-collection should works with.  The following line is here 
  ;; for documentation purposes in case you need it.  
  ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init))


;;Turns off elpaca-use-package-mode current declaration
;;Note this will cause evaluate the declaration immediately. It is not deferred.
;;Useful for configuring built-in emacs features.
(use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

#+END_SRC

* BACKUP

#+BEGIN_SRC emacs-lisp

  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))

#+END_SRC

* FLYCHECK

#+BEGIN_SRC emacs-lisp

  (use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))

#+END_SRC

* FONT

#+BEGIN_SRC emacs-lisp

(set-face-attribute 'default nil
  :font "FiraCode Nerd Font"
  :height 140
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu"
  :height 160
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "FiraCode Nerd Font"
  :height 140
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font Mono"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)

#+END_SRC

* MINIBUFFER ESCAPE

#+BEGIN_SRC emacs-lisp

  (global-set-key [escape] 'keyboard-escape-quit)
  
#+END_SRC

* ORG MODE

** Enabling ORG Mode TOC

#+BEGIN_SRC emacs-lisp

(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

#+END_SRC

** Enabling ORG Superstar

#+BEGIN_SRC emacs-lisp

  (use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :init
  (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿")
        org-superstar-item-bullet-alist '((?+ . ?•) (?- . ?➤))
        org-hide-leading-stars t
        org-superstar-leading-bullet ?‧))

#+END_SRC

** ORG Level Headers

#+BEGIN_SRC emacs-lisp

 (custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
 '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))

#+END_SRC

** Source Code Block Tag Expansion

| Typing Below + TAB | Expands to                              |
| <a                 | ’#+BEGIN_EXPORT ascii’ … ‘#+END_EXPORT  |
| <c                 | ’#+BEGIN_CENTER’ … ‘#+END_CENTER’       |
| <C                 | ’#+BEGIN_COMMENT’ … ‘#+END_COMMENT’     |
| <e                 | ’#+BEGIN_EXAMPLE’ … ‘#+END_EXAMPLE’     |
| <E                 | ’#+BEGIN_EXPORT’ … ‘#+END_EXPORT’       |
| <h                 | ’#+BEGIN_EXPORT html’ … ‘#+END_EXPORT’  |
| <l                 | ’#+BEGIN_EXPORT latex’ … ‘#+END_EXPORT’ |
| <q                 | ’#+BEGIN_QUOTE’ … ‘#+END_QUOTE’         |
| <s                 | ’#+BEGIN_SRC’ … ‘#+END_SRC’             |
| <v                 | ’#+BEGIN_VERSE’ … ‘#+END_VERSE’         |

#+BEGIN_SRC emacs-lisp

  (require 'org-tempo)

#+END_SRC

* FLYCHECK

#+BEGIN_SRC emacs-lisp

  (use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))

#+END_SRC

* SANE DEFAULTS

#+BEGIN_SRC emacs-lisp

(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
(global-display-line-numbers-mode 1) ;; Display line numbers
(global-visual-line-mode t)  ;; Enable truncated lines
(menu-bar-mode -1)           ;; Disable the menu bar 
(scroll-bar-mode -1)         ;; Disable the scroll bar
(tool-bar-mode -1)           ;; Disable the tool bar
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.

#+END_SRC

* THEME

#+BEGIN_SRC emacs-lisp

(add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
(load-theme 'blueth)

#+END_SRC

* TRANSPARENCY

#+BEGIN_SRC emacs-lisp

  (add-to-list 'default-frame-alist '(alpha-background . 95))

#+END_SRC
